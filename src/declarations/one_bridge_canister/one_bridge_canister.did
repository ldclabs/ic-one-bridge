type BridgeLog = record {
  id : opt nat64;
  to : BridgeTarget;
  fee : nat;
  to_tx : opt BridgeTx;
  to_addr : opt text;
  from : BridgeTarget;
  user : principal;
  from_tx : BridgeTx;
  created_at : nat64;
  error : opt text;
  icp_amount : nat;
  finalized_at : nat64;
};
type BridgeTarget = variant { Evm : text; Icp };
type BridgeTx = variant {
  Evm : record { bool; blob };
  Icp : record { bool; nat64 };
};
type CanisterArgs = variant { Upgrade : UpgradeArgs; Init : InitArgs };
type InitArgs = record {
  min_threshold_to_bridge : nat;
  token_symbol : text;
  governance_canister : opt principal;
  token_bridge_fee : nat;
  key_name : text;
  token_decimals : nat8;
  token_ledger : principal;
  token_logo : text;
  token_name : text;
};
type Result = variant { Ok; Err : text };
type Result_1 = variant { Ok : BridgeTx; Err : text };
type Result_2 = variant { Ok : text; Err : text };
type Result_3 = variant { Ok : blob; Err : text };
type Result_4 = variant { Ok : vec BridgeLog; Err : text };
type Result_5 = variant { Ok : StateInfo; Err : text };
type Result_6 = variant { Ok : BridgeLog; Err : text };
type StateInfo = record {
  total_withdrawn_fees : nat;
  error_rounds : nat64;
  evm_address : text;
  evm_latest_gas : vec record { text; record { nat64; nat; nat } };
  finalize_bridging_round : record { nat64; bool };
  total_collected_fees : nat;
  min_threshold_to_bridge : nat;
  token_symbol : text;
  icp_address : principal;
  total_bridge_count : nat64;
  evm_token_contracts : vec record { text; record { text; nat8; nat64 } };
  token_bridge_fee : nat;
  key_name : text;
  total_bridged_tokens : nat;
  evm_providers : vec record { text; record { nat64; vec text } };
  token_decimals : nat8;
  token_ledger : principal;
  token_logo : text;
  token_name : text;
  sub_bridges : vec principal;
};
type UpgradeArgs = record {
  min_threshold_to_bridge : opt nat;
  token_symbol : opt text;
  governance_canister : opt principal;
  token_bridge_fee : opt nat;
  token_ledger : opt principal;
  token_logo : opt text;
  token_name : opt text;
};
service : (opt CanisterArgs) -> {
  admin_add_bridges : (vec principal) -> (Result);
  admin_add_evm_contract : (text, nat64, text) -> (Result);
  admin_collect_fees : (principal, nat) -> (Result_1);
  admin_remove_bridges : (vec principal) -> (Result);
  admin_set_evm_providers : (text, nat64, vec text) -> (Result);
  bridge : (text, text, nat, opt text) -> (Result_1);
  erc20_transfer : (text, text, nat) -> (Result_2);
  erc20_transfer_tx : (text, text, nat) -> (Result_2);
  evm_address : (opt principal) -> (Result_2) query;
  evm_sign : (blob) -> (Result_3);
  evm_transfer_tx : (text, text, nat) -> (Result_2);
  finalized_logs : (nat32, opt nat64) -> (Result_4) query;
  info : () -> (Result_5) query;
  my_bridge_log : (BridgeTx) -> (Result_6) query;
  my_finalized_logs : (nat32, opt nat64) -> (Result_4) query;
  my_pending_logs : () -> (Result_4) query;
  pending_logs : () -> (Result_4) query;
  validate_admin_add_bridges : (vec principal) -> (Result_2);
  validate_admin_add_evm_contract : (text, nat64, text) -> (Result_2);
  validate_admin_collect_fees : (principal, nat) -> (Result_2);
  validate_admin_remove_bridges : (vec principal) -> (Result_2);
  validate_admin_set_evm_providers : (text, nat64, vec text) -> (Result_2);
}
